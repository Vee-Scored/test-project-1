import {
  require_jsx_runtime
} from "./chunk-NMLHVZ76.js";
import {
  require_react
} from "./chunk-QRULMDK5.js";
import {
  __toESM
} from "./chunk-G3PMV62Z.js";

// node_modules/@jdion/tilt-react/dist/tilt/tilt.component.js
var import_jsx_runtime = __toESM(require_jsx_runtime());
var import_react = __toESM(require_react());
function _define_property(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var Tilt = class extends import_react.Component {
  componentDidMount() {
    this.element = this.ref.current;
    setTimeout(() => {
      var _this_element_parentElement, _this_element;
      if (((_this_element = this.element) === null || _this_element === void 0 ? void 0 : (_this_element_parentElement = _this_element.parentElement) === null || _this_element_parentElement === void 0 ? void 0 : _this_element_parentElement.querySelector(":hover")) === this.element) {
        this.onMouseEnter();
      }
    }, 0);
  }
  componentWillUnmount() {
    this.transitionTimeout && clearTimeout(this.transitionTimeout);
    this.updateCall && cancelAnimationFrame(this.updateCall);
  }
  render() {
    const { children, className } = this.props;
    return (0, import_jsx_runtime.jsx)("div", { ref: this.ref, className, style: { ...this.props.style, ...this.state.style, transition: "".concat(this.settings.speed, "ms ").concat(this.settings.easing) }, onMouseEnter: this.onMouseEnter, onMouseMove: this.onMouseMove, onMouseLeave: this.onMouseLeave, children });
  }
  constructor(props) {
    super(props);
    _define_property(this, "ref", void 0);
    _define_property(this, "width", void 0);
    _define_property(this, "height", void 0);
    _define_property(this, "left", void 0);
    _define_property(this, "top", void 0);
    _define_property(this, "transitionTimeout", void 0);
    _define_property(this, "element", void 0);
    _define_property(this, "reverse", void 0);
    _define_property(this, "updateCall", void 0);
    _define_property(this, "settings", void 0);
    _define_property(this, "onMouseEnter", () => {
      const { style } = this.state;
      this.updateElementPosition();
      this.setState({ ...this.state, style: { ...style, willChange: "transform" } });
    });
    _define_property(this, "reset", () => {
      window.requestAnimationFrame(() => {
        this.setState({ ...this.state, style: { transform: "perspective(".concat(this.settings.perspective, "px) ") + "rotateX(0deg) rotateY(0deg) scale3d(1, 1, 1)" } });
      });
    });
    _define_property(this, "onMouseMove", (e) => {
      e.persist();
      if (this.updateCall !== null) {
        window.cancelAnimationFrame(this.updateCall);
      }
      this.updateCall = requestAnimationFrame(this.update.bind(this, e));
    });
    _define_property(this, "onMouseLeave", () => {
      if (this.settings.reset) {
        this.reset();
      }
    });
    _define_property(this, "getValues", (e) => {
      const x = (e.nativeEvent.clientX - this.left) / this.width;
      const y = (e.nativeEvent.clientY - this.top) / this.height;
      const _x = Math.min(Math.max(x, 0), 1);
      const _y = Math.min(Math.max(y, 0), 1);
      const tiltX = (this.reverse * (this.settings.max / 2 - _x * this.settings.max)).toFixed(2);
      const tiltY = (this.reverse * (_y * this.settings.max - this.settings.max / 2)).toFixed(2);
      const percentageX = _x * 100;
      const percentageY = _y * 100;
      return { tiltX, tiltY, percentageX, percentageY };
    });
    _define_property(this, "updateElementPosition", () => {
      var _this_element, _this_element1, _this_element2, _rect, _rect1;
      const rect = (_this_element = this.element) === null || _this_element === void 0 ? void 0 : _this_element.getBoundingClientRect();
      var _this_element_offsetWidth;
      this.width = (_this_element_offsetWidth = (_this_element1 = this.element) === null || _this_element1 === void 0 ? void 0 : _this_element1.offsetWidth) !== null && _this_element_offsetWidth !== void 0 ? _this_element_offsetWidth : 0;
      var _this_element_offsetHeight;
      this.height = (_this_element_offsetHeight = (_this_element2 = this.element) === null || _this_element2 === void 0 ? void 0 : _this_element2.offsetHeight) !== null && _this_element_offsetHeight !== void 0 ? _this_element_offsetHeight : 0;
      var _rect_left;
      this.left = (_rect_left = (_rect = rect) === null || _rect === void 0 ? void 0 : _rect.left) !== null && _rect_left !== void 0 ? _rect_left : 0;
      var _rect_top;
      this.top = (_rect_top = (_rect1 = rect) === null || _rect1 === void 0 ? void 0 : _rect1.top) !== null && _rect_top !== void 0 ? _rect_top : 0;
    });
    _define_property(this, "update", (e) => {
      const values = this.getValues(e);
      const { style } = this.state;
      this.setState({ ...this.state, style: { ...style, transform: "perspective(".concat(this.settings.perspective, "px) ") + "rotateX(".concat(this.settings.axis === "x" ? 0 : values.tiltY, "deg) ") + "rotateY(".concat(this.settings.axis === "y" ? 0 : values.tiltX, "deg) ") + "scale3d(".concat(this.settings.scale, ", ").concat(this.settings.scale, ", ").concat(this.settings.scale, ")") } });
      this.updateCall = null;
    });
    this.ref = (0, import_react.createRef)();
    this.width = 0;
    this.height = 0;
    this.left = 0;
    this.top = 0;
    this.transitionTimeout = null;
    this.updateCall = null;
    this.element = null;
    this.settings = { reverse: false, max: 35, perspective: 1e3, easing: "cubic-bezier(.03,.98,.52,.99)", scale: 1.1, speed: 1e3, transition: true, axis: null, reset: true, ...props.options };
    this.state = { style: { transition: "".concat(this.settings.speed, "ms ").concat(this.settings.easing) } };
    this.reverse = this.settings.reverse ? -1 : 1;
  }
};
export {
  Tilt
};
//# sourceMappingURL=@jdion_tilt-react.js.map
